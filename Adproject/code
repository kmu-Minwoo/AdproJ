import pygame
import sys
import random
import math
from pygame.constants import KEYDOWN, KEYUP, K_LEFT, K_RIGHT, K_KP_ENTER, K_RETURN, K_SPACE, K_r, K_ESCAPE
from pygame.locals import QUIT, Rect

class Block:
    def __init__(self, col, rect, speed = 0):
        self.col = col
        self.rect = rect
        self.speed = speed
        self.dir = random.randint(-45, 45) + 270

    def move(self):  # 공을 움직인다 , radians를 사용해서 dir을 라디안으로 변환, X축과 Y축의 방향 성분 구분
        self.rect.centerx += math.cos(math.radians(self.dir)) * self.speed
        self.rect.centery -= math.sin(math.radians(self.dir)) * self.speed

    def draw_E(self):
        pygame.draw.ellipse(SCREEN, self.col, self.rect)
        
    def draw_R(self):
        pygame.draw.rect(SCREEN,self.col,self.rect)

# 레벨에 맞게 설정
def setup(stage):
    global BALL

    BALL.speed += stage
    BALL = Block(GRAY, Rect(PADDLE.rect.centerx, PADDLE.rect.centery - 20, 20, 20), BALL.speed)
    draw_blocks()

# 시작 화면 보여주기
def display_start_screen():
    msg1 = f"stage : {curr_stage}"
    msg2 = "Press Enter or Space to Start"

    M_Game_Start1 = Bigfont.render(msg1, True, BLACK)
    M_Game_Start2 = Bigfont.render(msg2, True, BLACK)

    SCREEN.blit(M_Game_Start1, (80, 280))
    SCREEN.blit(M_Game_Start2, (80, 380))

# blocks 생성
def draw_blocks():
    colors = [RED, ORANGE, YELLOW, GREEN, BLUE, NAVY, PURPLE]
    for y, color in enumerate(colors, start = 0):
        for x in range(0, 9):
            BLOCKS.append(Block(color, Rect(x * 80 + 150, y * 40 + 40, 60, 20)))

# 오브젝트 보여주기
def draw_objects():
    global BALL, PADDLE, BLOCKS

    BALL.draw_E()
    PADDLE.draw_R()
    for block in BLOCKS:
        block.draw_R()

# 게임 화면 보여주기
def display_game_screen():
    global BLOCKS

    M_SCORE = Smallfont.render(f"SCORE : {score}", True, BLACK)
    M_STAGE = Smallfont.render(f"STAGE : {curr_stage}", True, BLACK)
    M_HEART = Smallfont.render(f"HEART : {heart}", True, BLACK)
    M_R = Smallfont.render(f"Press R to Restart", True, BLACK)

    SCREEN.blit(M_SCORE, (50, 10))
    SCREEN.blit(M_STAGE, (350, 10))
    SCREEN.blit(M_HEART, (650, 10))
    SCREEN.blit(M_R, (600, 750))

    check_movement()

    draw_objects()

# 충돌 확인
def check_movement():
    global Game_Start, score, heart, curr_stage, BLOCKS, BALL, PADDLE

    LenBlock = len(BLOCKS)
    BLOCKS = [x for x in BLOCKS if not x.rect.colliderect(BALL.rect)]

    if len(BLOCKS) != LenBlock:
        score += 10 * curr_stage
        BALL.dir *= -1

    if BALL.rect.centery < 1000:
        BALL.move()

    #패들과 공이 부딪힘
    if PADDLE.rect.colliderect(BALL.rect):  # colliderect은 볼과 패들의 충돌 여부를 검사합니다.
        BALL.dir = 90 + (PADDLE.rect.centerx - BALL.rect.centerx) / PADDLE.rect.width * 100

    #패들이 게임틀안에 존재
    if PADDLE.rect.centerx < 55 :
        PADDLE.rect.centerx = 55
    if PADDLE.rect.centerx > 945:
        PADDLE.rect.centerx = 945

    if BALL.rect.centerx < 0 or BALL.rect.centerx > 1000:
        BALL.dir = 180 - BALL.dir  # 반사각만큼 방향 변화
    elif BALL.rect.centery < 0:
        BALL.dir = -BALL.dir
    
    if len(BLOCKS) == 0:
        Game_Start = False
        curr_stage += 1
        setup(curr_stage)

    if BALL.rect.centery > 770 and len(BLOCKS) > 0:
        heart -= 1
        BALL = Block(GRAY, Rect(PADDLE.rect.centerx, PADDLE.rect.centery - 20, 20, 20), BALL.speed)
        if heart == 0:
            game_over()

# 오브젝트 초기화
def object_initialize():
    global Game_Start, score, heart, curr_stage, BLOCKS, BALL, PADDLE

    Game_Start = False

    score = 0
    heart = 3
    curr_stage = 1

    BLOCKS = []
    BALL = Block(GRAY, Rect(screen_width // 2, 680, 20, 20), 10)
    PADDLE = Block(GRAY, Rect(screen_width // 2, 700, 100, 30))

    draw_blocks()

# 게임 종료 처리
def game_over():
    global running
    
    running = False

    msg1 = Bigfont.render("FAILED", True, WHITE)
    msg2 = Bigfont.render(f"Score : {score}", True, WHITE)

    SCREEN.fill(BLACK)
    SCREEN.blit(msg1, (380, 400))
    SCREEN.blit(msg2, (380, 500))

# 초기화
pygame.init()
screen_width = 1000 # 가로 크기
screen_height = 800 # 세로 크기
SCREEN = pygame.display.set_mode((screen_width, screen_height))
pygame.display.set_caption('Block Breaker')
pygame.key.set_repeat(10,10)
FPSCLOCK = pygame.time.Clock()

# font
Bigfont = pygame.font.SysFont(None, 80)
Smallfont = pygame.font.SysFont(None, 50)

# colors (rgb)
WHITE = (0, 0, 0)
RED = (255, 0, 0)
ORANGE = (255, 150, 0)
YELLOW = (255, 228, 0)
GREEN = (11, 201, 4)
BLUE = (0, 84, 255)
NAVY = (0, 0, 147)
PURPLE = (201, 0, 167)
GRAY = (125, 125, 125)
BLACK = (255, 255, 255)

# 현재 스테이지
curr_stage = 1

# 현재 점수
score = 0

# 현재 목숨
heart = 3

# objects
BLOCKS = []
BALL = Block(GRAY, Rect(screen_width // 2, 680, 20, 20), 10)
PADDLE = Block(GRAY, Rect(screen_width // 2, 700, 100, 30))

# 게임 시작 여부
Game_Start = False

running = True # 게임이 실행중인가?
def main():
    global running, Game_Start, score, heart, curr_stage, BALL, BLOCKS, PADDLE

    colors = [RED, ORANGE, YELLOW, GREEN, BLUE, NAVY, PURPLE]
    for y, color in enumerate(colors, start = 0):
        for x in range(0, 9):
            BLOCKS.append(Block(color, Rect(x * 80 + 150, y * 40 + 40, 60, 20)))

    while running:        
        # 이벤트 루프
        for event in pygame.event.get():
            if event.type == QUIT:
                running = False
                pygame.quit()
                sys.exit()
            elif event.type == KEYUP:
                if event.key == K_RETURN or event.key == K_KP_ENTER or event.key == K_SPACE:
                    Game_Start = True
                elif event.key == K_r: # 재시작
                    object_initialize()
                elif event.key == K_ESCAPE: # 종료
                    running = False
                    pygame.quit()
                    sys.exit()
            elif event.type == KEYDOWN:
                if event.key == K_LEFT:
                    PADDLE.rect.centerx -= 10
                elif event.key == K_RIGHT:
                    PADDLE.rect.centerx += 10
        
        # 화면 전체를 하얗게 칠함
        SCREEN.fill(WHITE)

        if not Game_Start:
            display_start_screen() # 시작 화면 표시
        else:
            display_game_screen() # 게임 화면 표시

        # 화면 업데이트
        pygame.display.update()
        FPSCLOCK.tick(30)
    
    # 5초 정도 보여줌
    pygame.time.delay(5000)

    # 게임 종료
    pygame.quit()
    sys.exit()

if __name__ == '__main__':
    main()
